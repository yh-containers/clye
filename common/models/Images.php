<?php
namespace common\models;

use common\models\use_traits\SoftDelete;

class Images extends BaseModel
{
    use SoftDelete;
    const SCENARIO_FLOW_IMAGE = 'flow_image';
    public static function tableName()
    {
        return '{{%images}}';
    }

    public function attributeLabels()
    {
        return [
            'title' => '标题',
            'img' => '封面图',
            'sort' => '排序',
        ];
    }

    public static function getTypeInfo($type=null,$field=null)
    {
        //不要调整数组顺序谢谢
        $data = [
            ['name'=>'轮播图'],
        ];
        if(is_null($type)){
            return $data;
        }else{
            $type_info = isset($data[$type])?$data[$type]:[];
            if(is_null($field)){
                return $type_info;
            }else{
                return isset($type_info[$field])?$type_info[$field]:'';
            }
        }
    }
    public function scenarios()
    {
        $scenarios = parent::scenarios();
        $scenarios[self::SCENARIO_FLOW_IMAGE] = ['title','img','sort','type','status'];
        return $scenarios;
    }

    public function rules()
    {
        $rule =  parent::rules(); // TODO: Change the autogenerated stub
        array_push($rule,
            ['sort','number','min'=>0,'max'=>100,'tooSmall'=>'{attribute}不得低于{min}','tooBig'=>'{attribute}不得高于{max}','message'=>'{attribute}必须是数字'],
            ['type','default','value'=>0],
            ['sort','default','value'=>100],
            ['status','default','value'=>1]
        );
        $scenario = [];
        if($this->scenario==self::SCENARIO_FLOW_IMAGE){
            $scenario = [
                ['title','required','message'=>'{attribute}必须输入'],
                ['title', 'string','length'=>[1,255],'tooLong'=>'{attribute}不得超过{max}个字符','tooShort'=>'{attribute}不得低于{min}个字符'],
                ['img','required','message'=>'{attribute}必须上传'],
            ];
        }
        $rule = array_merge($rule,$scenario);
        return $rule;
    }


    /*
     * 日志记录
     * */
    public function getLogIntro(\yii\base\Event $event)
    {
        $content = '';
        $object = $event->sender;
        if($event->name==self::EVENT_AFTER_INSERT){
            $content = '新增:'.self::getTypeInfo($object['type'],'name');
        }elseif ($event->name==self::EVENT_BEFORE_DELETE){
            $content = '删除:'.self::getTypeInfo($object['type'],'name');
        }elseif ($event->name==self::EVENT_AFTER_UPDATE){
            $content = '更新:'.self::getTypeInfo($object['type'],'name');
        }
        return $content;
    }
}